// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  seed            = "seed.ts"
}

model Owner {
    name    String @id
    email   String
    hosts   Host[]
}

model Host {
  
  objectNetwork String @id
  host          String?
  subnet        String? 
  description   String?
  networkObject NetworkObject @relation(fields: [objectNetwork], references: [name])
  owner         Owner? @relation(fields: [ownerName], references: [name])
  ownerName     String?
} 

enum NetworkGroupType {
  HOSTS
  PORTS
}

model NetworkObject {
  
  name          String @id
  host          Host? 
  networkGroups NetGrouptoNetObj[]
  rules         RuleToNetworkObject[]
}

model NetworkGroup {
  
  objectGroupNetwork    String @id
  description           String? 
  type                  NetworkGroupType
  networkObjects        NetGrouptoNetObj[]
  childNetworkGroups    NetGrouptoNetGroup[] @relation("NetworkGroupParent")
  parentNetworkGroups   NetGrouptoNetGroup[] @relation("NetworkGroupChild")
  rules                 RuleToNetworkGroup[]
}

model NetGrouptoNetObj {

  networkGroupId String
  networkGroup   NetworkGroup @relation(fields: [networkGroupId], references: [objectGroupNetwork])
  
  networkObjectId String
  networkObject   NetworkObject @relation(fields: [networkObjectId], references: [name])

  @@id([networkGroupId, networkObjectId])

}

model NetGrouptoNetGroup {
  parentId     String
  parentGroup  NetworkGroup @relation("NetworkGroupParent", fields: [parentId], references: [objectGroupNetwork])
  
  childId      String
  childGroup   NetworkGroup @relation("NetworkGroupChild", fields: [childId], references: [objectGroupNetwork])

  @@id([parentId, childId])
}

model PortGroup {
  
  name      String @id
  protocol  String
  //ports              PortGrouptoPortObj[]
  startPort String
  endPort   String?
  
  
}

model RuleGroup {
    
    ruleGroupId  Int @id
    networkObjects  RuleToNetworkObject[]
    networkGroups   RuleToNetworkGroup[]
    rules   Rule[]
    remarks Remark[]
}

model Rule {
    protocol        String
    ruleType        String
    ruleBody        String @id
    ruleGroup       RuleGroup @relation(fields: [ruleGroupId], references: [ruleGroupId])
    ruleGroupId     Int
    
}

model RuleToNetworkObject {
  ruleGroupId Int
  rule   RuleGroup @relation(fields: [ruleGroupId], references: [ruleGroupId])
  
  networkObjectId String
  networkObject   NetworkObject @relation(fields: [networkObjectId], references: [name])

  @@id([ruleGroupId, networkObjectId])
}

model RuleToNetworkGroup {
  ruleGroupId Int
  rule   RuleGroup @relation(fields: [ruleGroupId], references: [ruleGroupId])
  
  networkGroupId String
  networkGroup   NetworkGroup @relation(fields: [networkGroupId], references: [objectGroupNetwork])

  @@id([ruleGroupId, networkGroupId])
}

model Remark {
    remark      String
    ruleGroup   RuleGroup @relation(fields: [ruleGroupId], references: [ruleGroupId])
    ruleGroupId Int
    
    @@id([remark, ruleGroupId])
}

// model Port {
  
//   portName   String @id 
//   portGroups PortGrouptoPortObj[]

// } 

// model PortGrouptoPortObj {

//   portGroupId   String
//   portGroup     PortGroup @relation(fields: [portGroupId], references: [objectGroupService])
  
//   portObjectId  String
//   portObject    Port @relation(fields: [portObjectId], references: [portName])

//   @@id([portGroupId, portObjectId])

// }